/********** Include webfonts **********/
@function wf-str-replace($string, $find, $replace, $all: true) {
  $index: str-index($string, $find);
  @if $index {
    $before: str-slice($string, 1, $index - 1);
    $after: str-slice($string, $index + str-length($find), str-length($string));
    $string: $before + $replace + $after;

    @if $all and not str-index($find, $replace) {
      $string: wf-str-replace($string, $find, $replace);
    }
  }
  @return $string;
}

@function wf-url-encode($string) {
  $replacements: (
    "!": "%21",
    "#": "%23",
    "$": "%24",
    "&": "%26",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "*": "%2A",
    "+": "%2B",
    ",": "%2C",
    "/": "%2F",
    ":": "%3A",
    ";": "%3B",
    "=": "%3D",
    "?": "%3F",
    "@": "%40",
    "[": "%5B",
    "]": "%5D"
  );

  @each $from, $to in $replacements {
    $string: wf-str-replace($string, $from, $to);
  }

  @return $string;
}

@function wf-implode($list, $seperator: ",") {
  $string: "";
  @for $i from 1 through length($list) {
    $el: nth($list, $i);
    $string: $string + $el;
    @if ($i < length($list)) {
      $string: $string + $seperator;
    }
  }
  @return $string;
}

@function wf-serialize($fonts) {
  @if type-of($fonts) == 'list' or type-of($fonts) == 'arglist' {
    $serialized: ();
    @each $font in $fonts {
      $serialized: append($serialized, wf-serialize($font));
    }
    @return wf-implode($serialized, "|");
  }

  @if type-of($fonts) == 'map' {
    $serialized: ();
    @each $family, $variants in $fonts {
      $variants: wf-implode($variants, ",");
      $variants: wf-str-replace($variants, " ", "");
      $serialized: append($serialized, "#{$family}:#{$variants}");
    }
    @return wf-serialize($serialized);
  }

  @if type-of($fonts) == 'string' {
    @return wf-url-encode($fonts);
  }

  @warn "Unsupported font type: #{type-of($fonts)}";
}

@mixin web-fonts($fonts...) {
  $web-fonts-protocol: "" !default;
  $protocol: $web-fonts-protocol;
  @if str-length($protocol) > 0 {
    $protocol: $protocol + ":";
  }
  $url: "#{$protocol}//fonts.googleapis.com/css?family=";
  $url: $url + wf-serialize($fonts);
  @import url($url);
}


/********** Site name styles **********/
@mixin site-name-styles{
  font-weight: normal;
  font-style: normal;
  justify-content: center;
  text-align: center;
  text-shadow: 1.4px 1.4px 5px rgb(79, 79, 79);
  padding: 0;
  margin: 0;
  display: flex;
  align-items: flex-end;
  
  a {
    text-decoration: none;
    color: $site-name-color;
  }
}

/********** Button Styles **********/
@mixin button(){
  border: 0;
  border-collapse: separate;
  background-origin: border-box !important;
  background: $button-bg-color;
  border-radius: 4px;
  padding: 0 21px;
  margin: 0 auto;
  height: 28px;
}

@mixin button-font-style(){
  text-decoration: none;
  font-size: 1em;
  font-family: $default-font;
  font-weight: bold;
  font-style: normal;
  text-shadow: 0 -1px 0 rgba(23, 23, 23, 0.82);
  position: relative;
  display: inline-block;
  vertical-align: middle;
  white-space: nowrap;
  text-align: center;
  color: #FFFFFF;
  margin: 0 !important;
  overflow: visible;
  cursor: pointer;
  text-indent: 0;
  line-height: 28px;
  box-sizing: content-box;
  background: #3D9CFA;

  &:hover {
    color: $button-text-hover-color;
    background-color: $button-hover-color;
  }

  &.active {
    color: $button-text-active-color;
    background-color: $button-active-color;
  }
}